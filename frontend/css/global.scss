// General
a {
    color: var(--rio-local-level-2-bg);
}

a:hover {
    color: var(--rio-local-level-2-bg-active);
}

code {
    font-family: $monospace-fonts;
}

html {
    background: var(--rio-global-background-bg);

    // Fill the whole screen, at least
    min-width: 100%;
    min-height: 100%;

    @include single-container;
}

body {
    margin: 0;
    padding: 0;

    font-family: var(--rio-global-font, sans-serif);

    // It's pretty common for random elements to be added to the <body> by
    // browser extensions or JS libraries, so we can't simply use
    // `@single-container()`.
    //
    // I'm not really sure what purpose(s) those elements serve, but it seems
    // unwise to simply hide them. For now, we'll turn the body into a Stack.
    display: inline-grid;

    & > * {
        grid-row: 1;
        grid-column: 1;
    }
}

// Force input elements to use the font-family we specified. For some reason
// they don't inherit it per default.
input,
textarea,
select {
    font-family: inherit;
    font-size: 1rem;
}

// Scrolling helper elements
.rio-scroll-helper {
    @include shared-component-style();
}

// Container elements for child components
.rio-child-wrapper {
    @include single-container();
}

// All components
.rio-component {
    @include shared-component-style();
}

// User-defined components
.rio-high-level-component {
    pointer-events: none;

    @include single-container();
}

// Overlay containers
@mixin fullscreen-overlays-container() {
    position: fixed;
    width: 100vw;
    height: 100vh;

    @include _shared-overlays-container-style();
}

@mixin layouted-overlays-container() {
    @include kill-size-request-with-zero-zero();

    @include _shared-overlays-container-style();
}

@mixin _shared-overlays-container-style() {
    // Don't allow children to be larger than the container, since that would
    // force the other children to grow as well.
    & > * {
        max-width: 100%;
        max-height: 100%;
        overflow: auto;
    }
}
